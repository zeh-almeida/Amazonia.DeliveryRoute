@page "/"

@using Amazonia.DeliveryRoute.Commons.Extensions
@using Amazonia.DeliveryRoute.Commons.Models
@using Amazonia.DeliveryRoute.UserInterface.Models
@using Microsoft.Extensions.Options
@using System.Linq
@using System.Text
@using System.Text.Json

@rendermode RenderMode.InteractiveServer

@inject IOptions<DeliveryRouteOptions> Options
@inject IHttpClientFactory ClientFactory

<PageTitle>Delivery Grid</PageTitle>

<div class="container text-center w-75 mw-100">
    <h3>Delivery Grid</h3>

    <div class="row">
        <div class="col-4">
            <div class="row mb-3">
                <div class="btn-group" role="group">
                    <input type="checkbox"
                           class="btn-check"
                           id="btncheck1"
                           autocomplete="off"
                           unchecked
                           @bind="SelectStartPoint"
                           @onclick="OnSelectStartPoint">
                    <label class="btn btn-outline-success" for="btncheck1">Select Start Position</label>

                    <input type="checkbox"
                           class="btn-check"
                           id="btncheck2"
                           autocomplete="off"
                           unchecked
                           @bind="SelectPickupPoint"
                           @onclick="OnSelectPickupPoint">
                    <label class="btn btn-outline-warning" for="btncheck2">Select Pickup Point</label>

                    <input type="checkbox"
                           class="btn-check"
                           id="btncheck3"
                           autocomplete="off"
                           unchecked
                           @bind="SelectDestinationPoint"
                           @onclick="OnSelectDestinationPoint">
                    <label class="btn btn-outline-danger" for="btncheck3">Select Destination</label>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col">
                    <div class="mb-3">
                        <i class="fa-solid fa-play fa-rotate-270 fa-2x text-success align-middle"></i>
                        <label for="startPosition" class="form-label">Starting Point</label>

                        <input type="text" class="form-control" id="startPosition" disabled placeholder="-" value="@(this.SelectedStart)">
                    </div>
                </div>

                <div class="col">
                    <div class="mb-3">
                        <i class="fa-solid fa-square fa-2x text-warning align-middle"></i>
                        <label for="pickupPosition" class="form-label">Pickup</label>

                        <input type="text" class="form-control" id="pickupPosition" disabled placeholder="-" value="@(this.SelectedPickup)">
                    </div>
                </div>

                <div class="col">
                    <div class="mb-3">
                        <i class="fa-solid fa-circle fa-2x text-danger align-middle"></i>
                        <label for="destinationPosition" class="form-label">Destination</label>

                        <input type="text" class="form-control" id="destinationPosition" disabled placeholder="-" value="@(this.SelectedDestination)">
                    </div>
                </div>
            </div>

            <div class="row mb-3">
                <button type="button"
                        class="btn btn-primary"
                        disabled="@(this.PointsSelected())"
                        @onclick="CalculateDistance">

                    Calculate route
                </button>
            </div>
        </div>

        <div class="col-8">
            <div class="col chess-board">
                <div class="row align-items-center">
                    <div class="row align-items-center">
                        @for (int column = 0; column < this.GridWidth; column++)
                        {
                            @if (0.Equals(column))
                            {
                                <div class="col"></div>
                            }

                            <div class="col align-self-center">@(column.AsColumnName())</div>
                        }
                    </div>

                    @{
                        bool colorToggle = true;
                    }

                    @for (int column = 0; column < this.GridWidth; column++)
                    {
                        <div class="row align-items-center">

                            @for (int row = 0; row < this.GridHeight; row++)
                            {
                                @if (0.Equals(row))
                                {
                                    <div class="col align-self-center">@(column + 1)</div>
                                }

                                var color = colorToggle ? "light" : "dark";
                                colorToggle = !colorToggle;

                                var itemId = $"{row.AsColumnName()}{column + 1}";

                                <div class="col align-self-center @color" id="@(itemId)" @onclick="args => SelectInterest(args, itemId)">
                                    @if (itemId.Equals(this.SelectedStart))
                                    {
                                        <i class="fa-solid fa-play fa-rotate-270 fa-2xl text-success align-text-bottom"></i>
                                    }

                                    @if (itemId.Equals(this.SelectedPickup))
                                    {
                                        <i class="fa-solid fa-square fa-2xl text-warning align-text-bottom"></i>
                                    }

                                    @if (itemId.Equals(this.SelectedDestination))
                                    {
                                        <i class="fa-solid fa-circle fa-2xl text-danger align-text-bottom"></i>
                                    }
                                </div>
                            }
                            @{
                                colorToggle = !colorToggle;
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-5">
        <h4>Previous Calculations</h4>

        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th scope="col">Route Taken</th>
                    <th scope="col">Total Distance</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var item in this.RoutingResults)
                {
                    <tr>
                        <td>
                            @foreach (var position in item.Path)
                            {
                                @if (!item.Path.First().Equals(position))
                                {
                                    <span class="mx-1"><i class="fa-solid fa-arrow-right"></i></span>
                                }

                                <span>
                                    @position
                                </span>
                            }
                        </td>

                        <td>@item.TotalDistance</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private int GridWidth { get; set; }

    private int GridHeight { get; set; }

    public bool SelectStartPoint { get; set; }

    public bool SelectPickupPoint { get; set; }

    public bool SelectDestinationPoint { get; set; }

    public string SelectedStart { get; set; } = string.Empty;

    public string SelectedPickup { get; set; } = string.Empty;

    public string SelectedDestination { get; set; } = string.Empty;

    public List<RoutingResult<Position>> RoutingResults { get; private set; } = [];

    protected override void OnInitialized()
    {
        this.GridHeight = Options.Value.GridHeight;
        this.GridWidth = Options.Value.GridWidth;

        this.Reset();
    }

    private void OnSelectStartPoint()
    {
        this.SelectPickupPoint = false;
        this.SelectDestinationPoint = false;
    }

    private void OnSelectPickupPoint()
    {
        this.SelectStartPoint = false;
        this.SelectDestinationPoint = false;
    }

    private void OnSelectDestinationPoint()
    {
        this.SelectStartPoint = false;
        this.SelectPickupPoint = false;
    }

    private void SelectInterest(EventArgs args, string itemId)
    {
        if (this.SelectStartPoint)
        {
            this.SelectedStart = itemId;
        }
        if (this.SelectPickupPoint)
        {
            this.SelectedPickup = itemId;
        }
        if (this.SelectDestinationPoint)
        {
            this.SelectedDestination = itemId;
        }
    }

    private bool PointsSelected()
    {
        return string.IsNullOrWhiteSpace(this.SelectedStart)
            || string.IsNullOrWhiteSpace(this.SelectedPickup)
            || string.IsNullOrWhiteSpace(this.SelectedDestination);
    }

    private async Task CalculateDistance()
    {
        var pickupRoute = await this.CalculateStartPickup();
        var destinationRoute = await this.CalculatePickupDestination();

        var finalRoute = new RoutingResult<Position>
            {
                TotalDistance = pickupRoute!.TotalDistance + destinationRoute!.TotalDistance,
                Path = pickupRoute.Path.Concat(destinationRoute.Path.Skip(1)),
            };

        this.RoutingResults.Add(finalRoute);
        this.Reset();
    }

    private void Reset()
    {
        this.SelectStartPoint = false;
        this.SelectPickupPoint = false;
        this.SelectDestinationPoint = false;

        this.SelectedStart = string.Empty;
        this.SelectedPickup = string.Empty;
        this.SelectedDestination = string.Empty;
    }

    private Task<RoutingResult<Position>?> CalculateStartPickup()
    {
        var startCoordinates = this.SelectedStart.AsCoordinates();
        var destinationCoordinates = this.SelectedPickup.AsCoordinates();

        var request = new RoutingRequest<Position>
            {
                StartPoint = new Position
                {
                    X = startCoordinates.Item1,
                    Y = startCoordinates.Item2,
                },

                DestinationPoint = new Position
                {
                    X = destinationCoordinates.Item1,
                    Y = destinationCoordinates.Item2,
                },
            };

        return this.ExecuteCalculation(request);
    }

    private Task<RoutingResult<Position>?> CalculatePickupDestination()
    {
        var startCoordinates = this.SelectedPickup.AsCoordinates();
        var destinationCoordinates = this.SelectedDestination.AsCoordinates();

        var request = new RoutingRequest<Position>
            {
                StartPoint = new Position
                {
                    X = startCoordinates.Item1,
                    Y = startCoordinates.Item2,
                },

                DestinationPoint = new Position
                {
                    X = destinationCoordinates.Item1,
                    Y = destinationCoordinates.Item2,
                },
            };

        return this.ExecuteCalculation(request);
    }

    private async Task<RoutingResult<Position>?> ExecuteCalculation(RoutingRequest<Position> request)
    {
        RoutingResult<Position>? result = null;
        var client = this.ClientFactory.CreateClient("DeliveryRoute.Api");
        var response = await client.PostAsJsonAsync("/api", request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            result = await JsonSerializer.DeserializeAsync<RoutingResult<Position>>(responseStream, ResultContext.Default.RoutingResultPosition);
        }

        return result;
    }
}
